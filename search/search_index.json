{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome! Welcome to the fatality.win documentation made by: L.A Big thanks to: DucaRiiRii for providing the original documentation and donating money :)","title":"Home"},{"location":"#welcome","text":"Welcome to the fatality.win documentation made by: L.A Big thanks to: DucaRiiRii for providing the original documentation and donating money :)","title":"Welcome!"},{"location":"callbacks/Callbacks/","text":"keyword description parameters paint call every frame ( render here! ) () events call whenever the server sends an event to you ( e.g. player_hurt, bullet_impact etc. ) ( event: game_event ) registered_shot call whenever a shot from the rage-/legitbot gets registered on the server ( shot : shot_t ) level_init call once map and all entities have been initialized ()","title":"Callbacks"},{"location":"callbacks/Example/","text":"Example function on_paint( ) -- Paint code end fatality.callbacks:add( \"paint\", on_paint )","title":"Example"},{"location":"callbacks/Example/#example","text":"function on_paint( ) -- Paint code end fatality.callbacks:add( \"paint\", on_paint )","title":"Example"},{"location":"config/Example/","text":"Example local config = fatality.config; local yaw_add_item = fatality.config:add_item( \"lua_yaw_add\", 0 )","title":"Example"},{"location":"config/Example/#example","text":"local config = fatality.config; local yaw_add_item = fatality.config:add_item( \"lua_yaw_add\", 0 )","title":"Example"},{"location":"config/Functions/","text":"fatality.config:add_item( name : string, default_value : float ) : fatality.value Creates and returns a config item. fatality.config:get_item( name : string ) : fatality.value Returns the specified config item.","title":"Functions"},{"location":"datatypes/datatypes/","text":"lag_record_t member description sim_time : int The players' time on the server matrix : matrix3x4_t The players' bone matrix dormant : boolean Wether the player is networked on the record origin : vector3 The position of the player velocity : vector3 The players' velocity eye_angles : angle The players' resolved eye angles record_shot_info_t member description has_info : boolean Shows if the values have been initialized extrapolated : boolean Shows if the player was being extrapolated on hit breaking_lc : boolean Shows if the player was breaking lagcomp delayed_shot : boolean Shows wether the shot was delayed backtrack_ticks : int The amount of ticks the player was backtracked shot_t member description victim : int The victim's index target_hitgroup : int The targeted hitgroup hit : boolean Shows wether the bullet hit the victim shotpos : csgo.vector3 The shooting position target_hitpos : csgo.vector3 The targeted hit position target_damage : int The amount of damage given shot_info : record_shot_info_t Additional information about the shot inaccuracy : float The inaccuracy hitchance : float The hitchance hurt : boolean Shows wether the player was hurt or not value member description get_int( ) : int Returns the int of the value get_bool( ) : boolean Returns the boolean of the value get_float( ) : float Returns the float of the value get_color( ) : csgo.color Returns the color of the value set_int( value : int ) : int Sets the int of the value set_bool( value : bool ) : boolean Sets the boolean of the value set_float( value : float ) : float Sets the float of the value set_color( value : color ) : csgo.color Sets the color of the value color member description constructor( r : int, g : int, b : int, a : int ) Creates and returns a color value game_event member description get_name( ) : string Returns the name of the event get_bool( aspect : string ) : boolean Returns the boolean of the specified aspect get_int( aspect : string ) : int Returns the int of the specified aspect get_float( aspect : string ) : boolean Returns the float of the specified aspect get_string( aspect : string ) : int Returns the string of the specified aspect vector3 member description constructor( x : float, y : float, z : float ) Creates and returns a vector3 value x : float The x value y : float The y value z : float The z value to_screen( ) : vector2 Converts the vector3 into a vector2 with the screen position angle derives from vector3 member description constructor( x : float, y : float, z : float ) Creates and returns a angle value convar member description get_int( ) : int Returns the int value of the convar get_float( ) : float Returns the float value of the convar unlock( ) : void Unlock the convar so it can be changed (WARNING! THIS CAN BAN YOU FROM SECURE SERVERS) set_int( value : int ) : void Sets the int of the convar set_string( value : string ) : void Sets the string of the convar set_float( value : float ) : void Sets the float of the convar set_color( value : color ) : void Sets the color of the convar entity netvar dump member description get_var_bool( netvar : string ) : boolean Returns the boolean value of the netvar get_var_int( netvar : string ) : int Returns the int value of the netvar get_var_float( netvar : string ) : float Returns the float value of the netvar get_var_short( netvar : string ) : short Returns the short value of the netvar get_var_handle( netvar : string ) : handle Returns the handle value of the netvar get_var_angle( netvar : string ) : csgo.angle Returns the angle value of the netvar get_var_vector( netvar : string ) : csgo.vector3 Returns the vector value of the netvar is_player( ) : boolean Shows wether the entity is a player or not is_dormant( ) : boolean Shows wether the entity is being networked (false=networked) get_index( ) : int Returns the index for the entity get_class_id( ) : int Returns the class id of the entity player derives from entity member description get_name( ) : string Returns the player name get_eye_pos( ) : csgo.vector3 Returns the player's eye position is_alive( ) : boolean Shows wether the player is alive or not","title":"Datatypes"},{"location":"datatypes/datatypes/#lag_record_t","text":"member description sim_time : int The players' time on the server matrix : matrix3x4_t The players' bone matrix dormant : boolean Wether the player is networked on the record origin : vector3 The position of the player velocity : vector3 The players' velocity eye_angles : angle The players' resolved eye angles","title":"lag_record_t"},{"location":"datatypes/datatypes/#record_shot_info_t","text":"member description has_info : boolean Shows if the values have been initialized extrapolated : boolean Shows if the player was being extrapolated on hit breaking_lc : boolean Shows if the player was breaking lagcomp delayed_shot : boolean Shows wether the shot was delayed backtrack_ticks : int The amount of ticks the player was backtracked","title":"record_shot_info_t"},{"location":"datatypes/datatypes/#shot_t","text":"member description victim : int The victim's index target_hitgroup : int The targeted hitgroup hit : boolean Shows wether the bullet hit the victim shotpos : csgo.vector3 The shooting position target_hitpos : csgo.vector3 The targeted hit position target_damage : int The amount of damage given shot_info : record_shot_info_t Additional information about the shot inaccuracy : float The inaccuracy hitchance : float The hitchance hurt : boolean Shows wether the player was hurt or not","title":"shot_t"},{"location":"datatypes/datatypes/#value","text":"member description get_int( ) : int Returns the int of the value get_bool( ) : boolean Returns the boolean of the value get_float( ) : float Returns the float of the value get_color( ) : csgo.color Returns the color of the value set_int( value : int ) : int Sets the int of the value set_bool( value : bool ) : boolean Sets the boolean of the value set_float( value : float ) : float Sets the float of the value set_color( value : color ) : csgo.color Sets the color of the value","title":"value"},{"location":"datatypes/datatypes/#color","text":"member description constructor( r : int, g : int, b : int, a : int ) Creates and returns a color value","title":"color"},{"location":"datatypes/datatypes/#game_event","text":"member description get_name( ) : string Returns the name of the event get_bool( aspect : string ) : boolean Returns the boolean of the specified aspect get_int( aspect : string ) : int Returns the int of the specified aspect get_float( aspect : string ) : boolean Returns the float of the specified aspect get_string( aspect : string ) : int Returns the string of the specified aspect","title":"game_event"},{"location":"datatypes/datatypes/#vector3","text":"member description constructor( x : float, y : float, z : float ) Creates and returns a vector3 value x : float The x value y : float The y value z : float The z value to_screen( ) : vector2 Converts the vector3 into a vector2 with the screen position","title":"vector3"},{"location":"datatypes/datatypes/#angle","text":"derives from vector3 member description constructor( x : float, y : float, z : float ) Creates and returns a angle value","title":"angle"},{"location":"datatypes/datatypes/#convar","text":"member description get_int( ) : int Returns the int value of the convar get_float( ) : float Returns the float value of the convar unlock( ) : void Unlock the convar so it can be changed (WARNING! THIS CAN BAN YOU FROM SECURE SERVERS) set_int( value : int ) : void Sets the int of the convar set_string( value : string ) : void Sets the string of the convar set_float( value : float ) : void Sets the float of the convar set_color( value : color ) : void Sets the color of the convar","title":"convar"},{"location":"datatypes/datatypes/#entity","text":"netvar dump member description get_var_bool( netvar : string ) : boolean Returns the boolean value of the netvar get_var_int( netvar : string ) : int Returns the int value of the netvar get_var_float( netvar : string ) : float Returns the float value of the netvar get_var_short( netvar : string ) : short Returns the short value of the netvar get_var_handle( netvar : string ) : handle Returns the handle value of the netvar get_var_angle( netvar : string ) : csgo.angle Returns the angle value of the netvar get_var_vector( netvar : string ) : csgo.vector3 Returns the vector value of the netvar is_player( ) : boolean Shows wether the entity is a player or not is_dormant( ) : boolean Shows wether the entity is being networked (false=networked) get_index( ) : int Returns the index for the entity get_class_id( ) : int Returns the class id of the entity","title":"entity"},{"location":"datatypes/datatypes/#player","text":"derives from entity member description get_name( ) : string Returns the player name get_eye_pos( ) : csgo.vector3 Returns the player's eye position is_alive( ) : boolean Shows wether the player is alive or not","title":"player"},{"location":"input/Example/","text":"Example local input = fatality.input; -- 72 -> 0x47 -> G key local is_down = input:is_key_down( 72 )","title":"Example"},{"location":"input/Example/#example","text":"local input = fatality.input; -- 72 -> 0x47 -> G key local is_down = input:is_key_down( 72 )","title":"Example"},{"location":"input/Functions/","text":"fatality.input Returns the input interface. fatality.input:is_key_down( key ) Returns boolean wether the key is pressed or not.","title":"Functions"},{"location":"interface_handler/cvar/Example/","text":"Example local cvar = csgo.cvar cvar:print_dev_console( \"B)\" )","title":"Example"},{"location":"interface_handler/cvar/Example/#example","text":"local cvar = csgo.cvar cvar:print_dev_console( \"B)\" )","title":"Example"},{"location":"interface_handler/cvar/Functions/","text":"csgo.cvar:find_var( var : string ) : csgo.convar Gets and returns the specified convar. csgo.cvar:print_console( text : string, col : csgo.color ) : void Prints a message to the console with the specified color. csgo.cvar:print_dev_console( text : string ) : void Prints a message to the developer console.","title":"Functions"},{"location":"interface_handler/debug_overlay/Example/","text":"Example local debug_overlay = csgo.debug_overlay debug_overlay:add_line_overlay( csgo.vector3( 0, 0, 0 ), csgo.vector3( 10, 10, 10 ), csgo.color( 255, 255, 255 ), true, 10 )","title":"Example"},{"location":"interface_handler/debug_overlay/Example/#example","text":"local debug_overlay = csgo.debug_overlay debug_overlay:add_line_overlay( csgo.vector3( 0, 0, 0 ), csgo.vector3( 10, 10, 10 ), csgo.color( 255, 255, 255 ), true, 10 )","title":"Example"},{"location":"interface_handler/debug_overlay/Functions/","text":"csgo.debug_overlay:add_box_overlay( origin : csgo.vector3, mins : csgo.vector3, maxs : csgo.vector3, orientation : csgo.angle, col : csgo.color, duration : float ) : void Renders a 3D box at the given origin with the specified boundaries. csgo.debug_overlay:add_line_overlay( start: csgo.vector3, destination: csgo.vector3, col : csgo.color, skip_occlusion : boolean, duration : float ) : void Renders a 3D line at the given origin to the given desitination with the specified color and duration .","title":"Functions"},{"location":"interface_handler/engine_client/Example/","text":"Example local engine = csgo.engine_client engine:client_cmd_unrestricted( \"+voicerecord\" )","title":"Example"},{"location":"interface_handler/engine_client/Example/#example","text":"local engine = csgo.engine_client engine:client_cmd_unrestricted( \"+voicerecord\" )","title":"Example"},{"location":"interface_handler/engine_client/Functions/","text":"csgo.engine_client:client_cmd_unrestricted( var : string ) : void Executes a console command without restrictions. csgo.engine_client:client_cmd( var : string ) : void Executes a console command with restrictions. csgo.engine_client:is_in_game( ) : boolean Returns true if you are ingame or false. csgo.engine_client:is_connected( ) : boolean Returns true if you are connected or false. csgo.engine_client:get_ping( ) : int Returns your ping. csgo.engine_client:get_map_name( ) : string Returns the map name.","title":"Functions"},{"location":"interface_handler/entity_list/Example/","text":"Example local entity_list = csgo.entity_list print( entity_list:get_max_players() )","title":"Example"},{"location":"interface_handler/entity_list/Example/#example","text":"local entity_list = csgo.entity_list print( entity_list:get_max_players() )","title":"Example"},{"location":"interface_handler/entity_list/Functions/","text":"csgo.entity_list:get_player( index : int ) : csgo.player Gets and returns the player from the specified index. csgo.entity_list:get_player_from_id( userid : int ) : csgo.player Gets and returns the player from the specified userid. csgo.entity_list:get_entity( index : int ) : csgo.entity Gets and returns the entity from the specified index. csgo.entity_list:get_from_handle( h : handle ) : csgo.entity Gets and returns the entity from the specified handle. csgo.entity_list:get_max_players( ) : int Returns the max players. csgo.entity_list:get_max_entities( ) : int Returns the max entity count. csgo.entity_list:get_localplayer( ) : csgo.player Returns the local player.","title":"Functions"},{"location":"interface_handler/events/Events/","text":"Event list","title":"Events"},{"location":"interface_handler/events/Example/","text":"Example -- to do","title":"Example"},{"location":"interface_handler/events/Example/#example","text":"-- to do","title":"Example"},{"location":"interface_handler/events/Functions/","text":"csgo.events:add_event( event_name : string ) : void Adds a callback registered to the specified event.","title":"Functions"},{"location":"interface_handler/global_vars/Example/","text":"Example local global_vars = csgo.global_vars print(global_var.realtime)","title":"Example"},{"location":"interface_handler/global_vars/Example/#example","text":"local global_vars = csgo.global_vars print(global_var.realtime)","title":"Example"},{"location":"interface_handler/global_vars/Variables/","text":"csgo.global_vars.realtime : float The absolute time. csgo.global_vars.framecount : int The absolute frame count. csgo.global_vars.curtime : float The current time. csgo.global_vars.frametime : float The time spent on the last server or client frame. csgo.global_vars.tickcount : int The tick count. csgo.global_vars.interval_per_tick The time between ticks.","title":"Variables"},{"location":"math/Example/","text":"Example -- Get math instance local math = fatality.math -- Calculates angle between two vectors local angle = math:calc_angle( csgo.vector3( 0, 0, 0 ), csgo.vector3( 100, 50, 300 ) )","title":"Example"},{"location":"math/Example/#example","text":"-- Get math instance local math = fatality.math -- Calculates angle between two vectors local angle = math:calc_angle( csgo.vector3( 0, 0, 0 ), csgo.vector3( 100, 50, 300 ) )","title":"Example"},{"location":"math/Functions/","text":"fatality.math:calc_angle( origin : csgo.vector3, destination : csgo.vector3) : csgo.angle Calculates and returns the angle between 2 vectors.","title":"Functions"},{"location":"menu/Example/","text":"Example -- Get menu & config instance local menu = fatality.menu local config = fatality.config -- Create config item ( name, default ) local example_item = config:add_item( \"example_item\", 1.0 ) -- Add menu item ( Control name, tab_name, sub_tab_name, child_name, config_item ) local example_checkbox = menu:add_checkbox( \"Example\", \"visuals\", \"misc\", \"various\", example_item ) -- Same can be done for various other menu items -- Slider: -- local example_slider = menu:add_slider( \"Example\", \"visuals\", \"misc\", \"various\", example_item, 0.0, 100.0, 1.0 ) -- Combobox: -- local example_combo = menu:add_combo( \"Example\", \"visuals\", \"misc\", \"various\", example_item ) -- example_combo:add_item( \"Item 1\", example_item ) -- example_combo:add_item( \"Item 2\", example_item ) -- Multicombo: -- For this you must create multiple separate config items in addition -- local item_1 = config:add_item( \"item_1\", 1.0 ) -- local item_2 = config:add_item( \"item_2\", 1.0 ) -- local example_multicombo = menu:add_multi_combo( \"Example\", \"visuals\", \"misc\", \"various\", example_item, 0.0, 100.0, 1.0 ) -- example_multicombo:add_item( \"Item 1\", item_1 ) -- example_multicombo:add_item( \"Item 2\", item_2 ) -- More info regarding menu can be found here: https://fatality.win/threads/fatality-menu.504/","title":"Example"},{"location":"menu/Example/#example","text":"-- Get menu & config instance local menu = fatality.menu local config = fatality.config -- Create config item ( name, default ) local example_item = config:add_item( \"example_item\", 1.0 ) -- Add menu item ( Control name, tab_name, sub_tab_name, child_name, config_item ) local example_checkbox = menu:add_checkbox( \"Example\", \"visuals\", \"misc\", \"various\", example_item ) -- Same can be done for various other menu items -- Slider: -- local example_slider = menu:add_slider( \"Example\", \"visuals\", \"misc\", \"various\", example_item, 0.0, 100.0, 1.0 ) -- Combobox: -- local example_combo = menu:add_combo( \"Example\", \"visuals\", \"misc\", \"various\", example_item ) -- example_combo:add_item( \"Item 1\", example_item ) -- example_combo:add_item( \"Item 2\", example_item ) -- Multicombo: -- For this you must create multiple separate config items in addition -- local item_1 = config:add_item( \"item_1\", 1.0 ) -- local item_2 = config:add_item( \"item_2\", 1.0 ) -- local example_multicombo = menu:add_multi_combo( \"Example\", \"visuals\", \"misc\", \"various\", example_item, 0.0, 100.0, 1.0 ) -- example_multicombo:add_item( \"Item 1\", item_1 ) -- example_multicombo:add_item( \"Item 2\", item_2 ) -- More info regarding menu can be found here: https://fatality.win/threads/fatality-menu.504/","title":"Example"},{"location":"menu/Functions/","text":"fatality.menu:add_checkbox( control_name : string, tab_name : string, sub_tab_name : string, child_name : string, config_item : fatality.value ) : fatality.checkbox Creates and returns a checkbox object. fatality.menu:add_slider( control_name : string, tab_name : string, sub_tab_name : string, child_name : string, config_item : fatality.value, min_value : float, max_value : float, slider_step : float ) : fatality.slider Creates and returns a slider object. fatality.menu:add_combo( control_name : string, tab_name : string, sub_tab_name : string, child_name : string, config_item : fatality.value ) : fatality.combobox Creates and returns a combo object. fatality.menu:add_multi_combo( control_name : string, tab_name : string, sub_tab_name : string, child_name : string, config_item : fatality.value ) : fatality.combobox Creates and returns a multi combo object. fatality.menu:get_reference( tab : string, sub_tab : string, group : string, control_name : string ) : fatality.value Returns a reference to the specified gui object.","title":"Functions"},{"location":"render/Example/","text":"Example -- Get render instance local render = fatality.render -- Will be called every time a frame is rendered function on_paint( ) -- Create color local dark_blue = csgo.color( 33, 27, 70, 255 ) -- Draw filled rectangle at position 10, 10 with size 100, 100 render:rect_filled( 10, 10, 100, 100, dark_blue ) end -- Register all callback functions that should be called local callbacks = fatality.callbacks callbacks:add( \"paint\", \"on_paint\" )","title":"Example"},{"location":"render/Example/#example","text":"-- Get render instance local render = fatality.render -- Will be called every time a frame is rendered function on_paint( ) -- Create color local dark_blue = csgo.color( 33, 27, 70, 255 ) -- Draw filled rectangle at position 10, 10 with size 100, 100 render:rect_filled( 10, 10, 100, 100, dark_blue ) end -- Register all callback functions that should be called local callbacks = fatality.callbacks callbacks:add( \"paint\", \"on_paint\" )","title":"Example"},{"location":"render/Functions/","text":"fatality.render:rect_filled( x : float, y : float, width : float, height : float, col : csgo.color ) : void Draws a filled rectangle. fatality.render:create_font( font_family : string, size : int, weight : int, outline : boolean ) : csgo.font Creates a font and returns it. fatality.render:text( font : csgo.font, x : float, y : float, text : string, col : csgo.color ) : void Renders text with font. fatality.render:rect_fade( x : float, y : float, width : float, height : float, col1 : csgo.color, col2 :csgo.color, horizontal : boolean ) : void Draws a gradient filled rectangle. fatality.render:rect( x : float, y : float, width : float, height : float, col : csgo.color ) : void Draws a rectangle. fatality.render:text_size( font : csgo.font, text : string ) : csgo.vector2 Returns the size of the specified text with the specified font. fatality.render:indicator( x : float, y : float, text : string, is_active : boolean, bar_progress : float ) : void Renders indicator with a bar below (0 - 1 / -1 for no bar). fatality.render:draw_hitgroup( player : csgo.player, matrices : csgo.matrix3x4_t, hitgroup : int, duration: float, col : csgo.color ) : void Renders specified hitgroup (-1 for all hitboxes). fatality.render:screen_size( ) : csgo.vector2 Returns the screen size.","title":"Functions"}]}